{
  "hash": "b2398904dc2d1cf1dea9f0a136449e8e",
  "result": {
    "markdown": "---\ntitle: \"Tutorial - Introduction to ggplot2\"\nsubtitle: \"Highlighting Disproportionate Impact\"\ndate: \"2022-10-28\"\n---\n\n\n\n\n::: {.callout-note}\nThis post was originally created for the CCC IR R Work Group - an informal gathering of IR professionals interested in learning more about R.\n:::\n\n> Halloween Town University (HTU) wants to visualize the transfer rates of their students by ethnicity and highlight any disproportionate impact among the population. They want the visual to conform to their hideous internal branding guidelines, while communicating the critical pieces of information.\n\n# Intro\n\nThis tutorial is designed to introduce the `ggplot2` R package to IR professionals in the R working group, by visualizing disproportionate impact found within transfer rate across ethnicity. NOTE: The data used is artificially generated and provided by the `DisImpact` package.\n\nSpecifically, we apply PPG methodology to the `student_equity` data.frame from the `DisImpact` package using the `di_ppg` function. Then, we visualize the results using functions from `ggplot2`. This is a common and important task for most research departments.\n\n## Our Goal\n\nThis is what we are working towards:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nThis is the code to generate that graph:\n\n```r\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Clean our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference), color = clr_green, size = 2) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), color = clr_purple, nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), color = clr_green, nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    ) +\n    scale_fill_manual(values = c(\"DI\" = clr_orange, \"No DI\" = clr_dark)) +\n    scale_y_continuous(labels = scales::percent,\n                       expand = expansion(mult = c(0, .02))) +\n    theme_bw() +\n    theme(\n        plot.title = element_text(face = \"bold\", color = clr_red),\n        legend.position = c(.5, .9),\n        panel.grid.major.x = element_blank()\n    )\n```\n\nThroughout this tutorial, I'll do my best to explain each line of the above code and how you might change it to fit your needs. \n\n## How we'll get there\n\n- Set Up - Install the necessary packages.\n\n- Quick Disproportionate Impact Analysis - Getting data to visualize\n\n- ggplot2 theory?\n\n- Part 1: Bare Minimum - Get A Basic Bar Chart\n\n- Part 2: Extra Credit - Make the Bar Chart Fancy\n\n# Set Up\n\nI'd recommend running all of the code in this tutorial, so you can see the output from each step, as we walk through it. To follow along with this tutorial, you'll need to have two packages installed:\n\n- [ggplot2](https://ggplot2.tidyverse.org/)\n\n- [DisImpact](https://cran.r-project.org/web/packages/DisImpact/vignettes/Tutorial.html)\n\nYou can install both packages with the following code in an R session:\n\n```r\ninstall.packages(c('ggplot2', 'DisImpact'))\n```\n\nIf you are following along in your own R session, once the packages are installed, you should load each package so we can use the functions contained. To do this, add the following code to the top of your script:\n\n```r\nlibrary(ggplot2)\nlibrary(DisImpact)\n```\n\n# Quick Disproportionate Impact Analysis\n\nOur goal in this section is to quickly get some data that we can start to visualize. In the real world, this part is the most important and may likely take the most time. However, since our focus is on visualization, we haphazardly \"analyze\" some artificial data and take the results at face-value.\n\nThe `DisImpact` packages comes with some toy data that saves us from having to read any data into R. The data is called `student_equity` and it looks like this (selecting only a few columns):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(DisImpact::student_equity[c(\"Student_ID\", \"Ethnicity\", \"Transfer\", \"Cohort\", \"Ed_Goal\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Student_ID       Ethnicity Transfer Cohort      Ed_Goal\n1     100001 Native American        0   2017 Deg/Transfer\n2     100002 Native American        0   2017 Deg/Transfer\n3     100003 Native American        0   2017 Deg/Transfer\n4     100004 Native American        1   2017        Other\n5     100005 Native American        0   2017 Deg/Transfer\n6     100006 Native American        1   2017        Other\n```\n:::\n:::\n\n\nWe're going to use the `di_ppg` function from the `DisImpact` package to calculate the Disproportionate Impact across ethnicities for students' Transfer Rates. The `di_ppg` function is our way of using the PPG Disproportionate Impact Methodology as explained here: [CCCCO PPG Intro](https://www.cccco.edu/-/media/CCCCO-Website/About-Us/Divisions/Digital-Innovation-and-Infrastructure/Research/Files/PercentagePointGapMethod2017.ashx)\n\nWe will name our results `di_data`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Necessary Packages\nlibrary(ggplot2)   # Package to visualize data\nlibrary(DisImpact) # Package with functions for calculating DI\n\n# Step 1: Analyze Transfer Rates by Ethnicity using PPG and assign results to an object named \"di_data\"\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n```\n:::\n\n\n`di_data` is a data.frame (like `student_equity`). I think of data.frames like excel sheets. They are tabular, with column names and rows.\n\nOur `di_data` data.frame look like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(di_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 12\n  group     n success   pct refer…¹ refer…²    moe pct_lo pct_hi di_in…³ succe…⁴\n  <chr> <dbl>   <int> <dbl>   <dbl> <chr>    <dbl>  <dbl>  <dbl>   <dbl>   <dbl>\n1 Asian  6000    4292 0.715   0.526 overall 0.03    0.685  0.745       0       0\n2 Black  2000     607 0.304   0.526 overall 0.03    0.273  0.334       1     386\n3 Hisp…  4000     847 0.212   0.526 overall 0.03    0.182  0.242       1    1139\n4 Mult…  1000     504 0.504   0.526 overall 0.0310  0.473  0.535       0       0\n5 Nati…   200      78 0.39    0.526 overall 0.0693  0.321  0.459       1      14\n6 White  6800    4200 0.618   0.526 overall 0.03    0.588  0.648       0       0\n# … with 1 more variable: success_needed_full_parity <dbl>, and abbreviated\n#   variable names ¹​reference, ²​reference_group, ³​di_indicator,\n#   ⁴​success_needed_not_di\n```\n:::\n:::\n\n\nThat's a lot of columns to think about for this tutorial, so I'm going to select only those variables that we'll use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Necessary Packages\nlibrary(ggplot2)   # Package to visualize data\nlibrary(DisImpact) # Package with functions for calculating DI\n\n# Step 1: Analyze Transfer Rates by Ethnicity using PPG and assign results to an object named \"di_data\"\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\n# Step 2: Select only the columns we'll use\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(di_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  group             pct di_indicator reference     n\n  <chr>           <dbl>        <dbl>     <dbl> <dbl>\n1 Asian           0.715            0     0.526  6000\n2 Black           0.304            1     0.526  2000\n3 Hispanic        0.212            1     0.526  4000\n4 Multi-Ethnicity 0.504            0     0.526  1000\n5 Native American 0.39             1     0.526   200\n6 White           0.618            0     0.526  6800\n```\n:::\n:::\n\n\nMuch better.\n\nThe only other thing I want to change about this data is our \"di_indicator\" variable. Instead of having a \"1\" for disproportionately impacted and a \"0\" for not disproportionately impacted, I want to use the labels \"DI\" and \"No DI\", respectively. This will make our visual easier to interpret later on:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Necessary Packages\nlibrary(ggplot2)   # Package to visualize data\nlibrary(DisImpact) # Package with functions for calculating DI\n\n# Step 1: Analyze Transfer Rates by Ethnicity using PPG and assign results to an object named \"di_data\"\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\n# Step 2: Select only the columns we'll use\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\n# Step 3: Recode the DI Indicator Column\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n```\n:::\n\n\nAnd now our data looks like this (see the \"di_indicator\" column):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(di_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  group             pct di_indicator reference     n\n  <chr>           <dbl> <chr>            <dbl> <dbl>\n1 Asian           0.715 No DI            0.526  6000\n2 Black           0.304 DI               0.526  2000\n3 Hispanic        0.212 DI               0.526  4000\n4 Multi-Ethnicity 0.504 No DI            0.526  1000\n5 Native American 0.39  DI               0.526   200\n6 White           0.618 No DI            0.526  6800\n```\n:::\n:::\n\n\n\n# ggplot2 theory?\n\nThere's a question mark on that heading because I'm not an expert in this stuff, and my mental model for these things was informed by a variety of blog posts, StackOverflow threads, some technical documentation, and experience. If you find something on the internet that contradicts what I say here, perhaps default to that, and let me know so I can update my mental model :)\n\n## Building layers\n\nPlots created by `ggplot2` are composed of \"layers\". We start with a blank canvas, then use the data to create an x and y axis layer. Then we add a layer of rectangles for our bar chart, then we add a layer of text to label our bars. `ggplot2` handles a lot of the positioning work for us, but provides tools to let us customize where/how each element of each layer appears.\n\n## Geoms and Aesthetics\n\nTwo fundamental `ggplot2` ideas are \"geoms\" and \"aesthetics\". **geoms** (geometry objects) are **shapes** on the graph, like squares, circles, lines, and (less intuitively) text. Aesthetics are **attributes** of those shapes: fill, linetype, size, opacity, color, etc...\n\nWe can have multiple `geoms` in a single graph - think of a `line` graph with a `point` at each connection and `text` displaying each value. We can `map` our data to various aesthetics (abbreviated `aes` in `ggplot2`) of the shapes - think changing the `color` of a bar in a bar graph depending on whether our data shows DI or not.\n\nWith `data`, `geoms`, and `aes`thetics, we can create a basic graph.\n\n# Part 1: Bare Minimum - Get A Basic Bar Chart\n\nOur first step is to create a canvas. We do that with the `ggplot` function, providing it with our DI `data` and instructions for which columns to `map` to the x-axis and y-axis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct))\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nOur x and y axes are visible. But now we want to add some shapes. In order to **add** another layer, we actually use the plus sign (`+`) before our next call. \n\nLet's add rectangles to create a bar chart, by adding (`+`) a `geom`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity')\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nThe `stat='identity'` argument is us telling `ggplot2` that we've already summarized the numbers. The default value is `stat='count'` which would count our `y-axis` variable, if we didn't specify that we've already summarized it.\n\nNow we have a bar graph.\n\n## Add Text\n\nWe want to `label` each bar with the y-axis value using `text`. To do that, we can add a `geom_text` and specify that we want to use the outcome variable as our `label`: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity') +\n    geom_text(aes(label = pct))\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Clean Up Text\n\nThat many decimal places looks ugly, so let's clean up that data on the fly. We can do this by rounding the percentage to two places, mutliply it by 100, and paste a percentage sign on the end:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity') +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")))\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nI want the text to be slightly above the bar, instead of overlapping. Currently, `ggplot2` is using the y-axis value to position our text. We want to `nudge` it slightly above. There is an argument specifically for this purpose:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity') +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), nudge_y = .02)\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n:::{.callout-note}\nIf you look at the help documentation for `geom_bar` and `geom_text`, you'll see that they require a `mapping` and a `data` argument. We don't specifically provide those arguments, so how does `ggplot2` know that we want to use our `di_data` and that the x-axis should be `Ethnicity` and the y-axis should be `outcome` (in our case Transfer rate). Well, subsequent layers will inherit those arguments from our original call to `ggplot`. This is useful because it prevents us from having to specify the same data and mappings for each layer. However, if needed, we can still override those defaults by specifying new `data` or `mapping` arguments. In our case, though, using the defaults is what we want.\n:::\n\n## Highlighting DI\n\nNext we want to call attention to those populations who have experienced Disproportionate Impact. In our `di_data` data.frame, there is a column called \"di_indicator\", that shows a \"DI\" for those with DI and a \"No DI\" for those without.\n\nWe want the `aes`thetic of our `geom_bars` to change, based on \"di_indicator\". So within our `geom_bar` call, lets add a call to `aes()`. We use the `fill` aesthetic, to fill the shape up with color. The `color` aesthetic only deals with the color of the lines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), nudge_y = .02)\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nA legend appeared helps us distinguish what each color means. Cool!\n\n## Adding Labels\n\nWe want to add/modify the graphs labels, so that our audience knows that they're looking at. There are many ways to do this, but I've only ever used the `labs` (short for \"labels\") function in `ggplot2`. I'm not sure if these elements are considered geoms, aesthetics, or something else, but they're easy to use. You're just gonna have to memorize the arguments or use `?labs` to learn more:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), nudge_y = .02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    )\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## Reference Line\n\nWe want to create a horizontal line (geom) that shows us where the Overall Transfer Rate is. We also want to label this line with text to let our audience know what it meant.\n\nKnowing where the \"Overall Tranfer Rate\" lives in our data is half of the battle. It's located in our `di_data` data.frame in a variable called `reference`. In the R console we can see it with the following line of code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndi_data$reference\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5264 0.5264 0.5264 0.5264 0.5264 0.5264\n```\n:::\n:::\n\n\nNotice how it shows up multiple times? That's because it's included in each row of the data.frame. If we only want *one* to show up, we can make a call to the `unique` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(di_data$reference)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5264\n```\n:::\n:::\n\nWe can combine this with a `geom_hline` to our chart like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference)) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), nudge_y = .02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    )\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nAwesome! Let's label that line now, so people know what it means. We want to add text (geom) to the line. And it looks like there is space to position the text above the bar for the \"Black\" category. I'm also creating a more appropriately formatted label at the same time and nudging it a little below the actual reference line:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference)) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    )\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## End Part 1\n\nVOILA!! we have a graph that can stand on it's own. However, we'll learn how to make it spookier in the second part.\n\n# Part 2: Extra Credit - Make the Bar Chart Fancy\n\nENTER AT YOUR OWN RISK\n\nBEWARE\n\nTHIRD SPOOKY CAUTION\n\nThis is a really great stopping point. Our work so far can be applied to about 80% of our use-cases and should be enough to get you going.\n\nEvery line of code above had huge marginal returns for the quality of our graph. Moving forward, though, we're going to get even more technical while only making smaller changes to the graph.\n\nIn essence, anything beyond this point makes you an over achiever.\n\n## Custom Colors\n\nThe default colors are pretty ugly and don't really help us \"highlight\" the in-need populations. To do that, we want a more muted color for the \"No DI\" students and a louder color for the \"DI\" students.\n\nAfter googling \"Halloween Color Hex Codes\", I found the following \"hex codes\" (google it) and am going to add them to our script above our graph code.\n\n:::{.callout-note}\nI'm also going to add comments that break our code up into sections, so things are more visually organized.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Clean our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference)) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    )\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nWe've just declared our colors. We haven't used them anywhere, so our graph looks unchanged.\n\nIn order to specify that \"DI\" students should have the color `clr_orange` and that \"No DI\" students should have the color `clr_dark`, we need to use `scale_fill_manual`.\n\nHonestly, I don't know how/why we use a function that starts with `scale_`, but the `fill` makes sense, because we're changing the `fill` and the `manual` makes sense cause we're doing it manually, as opposed to letting `gglpot2` handle the color choices.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Clean our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference)) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    ) +\n    scale_fill_manual(values = c(\"DI\" = clr_orange, \"No DI\" = clr_dark))\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nNow let's change the color of our reference line, reference line text, and bar labels. We're also going to switch the order of our code to have our `geom_hline` be \"behind\" the bar labels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Prepare our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference), color = clr_green, size = 2) + # CHANGED HERE\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), color = clr_purple, nudge_y = .02) + # CHANGED HERE\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), color = clr_green, nudge_y = -.02) + # CHANGED HERE\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    ) +\n    scale_fill_manual(values = c(\"DI\" = clr_orange, \"No DI\" = clr_dark))\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n## Changing the Y-Axis Percentages\n\nNow we want to change the Y-Axis labels from decimals (default) to formatted percentages. This will make it a little easier on the eyes.\n\nWe're adding the `scale_y_continuous` function here:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Clean our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference), color = clr_green, size = 2) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), color = clr_purple, nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), color = clr_green, nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    ) +\n    scale_fill_manual(values = c(\"DI\" = clr_orange, \"No DI\" = clr_dark)) +\n    scale_y_continuous(labels = scales::percent)\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## Add Theme\n\n`ggplot2` comes with many themes that can be applied to give the visual a different look. All of these functions start with `theme_`. Below we add a call to `theme_bw` (short for \"theme black/white\"). Try out some other themes, like `theme_minimal` or `theme_classic`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Clean our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference), color = clr_green, size = 2) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), color = clr_purple, nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), color = clr_green, nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    ) +\n    scale_fill_manual(values = c(\"DI\" = clr_orange, \"No DI\" = clr_dark)) +\n    scale_y_continuous(labels = scales::percent) +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nThemes focus on aspect of the visual that are not really concerned with data. We can add our own theme elements with a call to the general `theme()` function.\n\nUse `?theme` to see the never ending list of elements you can manually control. It's overwhelming, but useful when you have a very specific look you're going for. Let's change the way the Title Text looks:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Clean our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference), color = clr_green, size = 2) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), color = clr_purple, nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), color = clr_green, nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    ) +\n    scale_fill_manual(values = c(\"DI\" = clr_orange, \"No DI\" = clr_dark)) +\n    scale_y_continuous(labels = scales::percent) +\n    theme_bw() +\n    theme(\n        plot.title = element_text(face = \"bold\", color = clr_red)\n    )\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nNow lets change the position of the legend and remove the vertical background lines:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Clean our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference), color = clr_green, size = 2) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), color = clr_purple, nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), color = clr_green, nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    ) +\n    scale_fill_manual(values = c(\"DI\" = clr_orange, \"No DI\" = clr_dark)) +\n    scale_y_continuous(labels = scales::percent) +\n    theme_bw() +\n    theme(\n        plot.title = element_text(face = \"bold\", color = clr_red),\n        legend.position = c(.5, .9),\n        panel.grid.major.x = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](disimpact-ggplot2_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nMost arguments within the `theme()` function, will take calls from the `element_*` family of functions, like `element_text`, `element_rect`, or `element_line` depending on what kind of element you want to change. Use `ggplot2::element_text` to read the docs.\n\n# Conclusion\n\nI'm running out of time. Please let me know if you have any questions via the R Working Group!\n",
    "supporting": [
      "disimpact-ggplot2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}