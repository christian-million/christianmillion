[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Christian Million",
    "section": "",
    "text": "Welcome! This is the personal website of Christian Million. This website serves as a central repository to catalog various on-goings about my career and personal life.\n\n\nUniversity of California, Davis | Davis, CA B.A. Economics | 2015\n\n\n\nSee my resume"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Christian Million",
    "section": "",
    "text": "Posts\n\n\n\n\n\n\n\n\n\n\nIntro to ggplot2\n\n\n\nOct 28, 2022\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\nProjects\n\n\n\n\n\n\n\nProject 1\n\n\n\n\n\n\nChristian Million\n\n\nJul 15, 2022\n\n\n\n\n\n\n\n\n\n\n\nProject 2\n\n\n\n\n\n\nChristian Million\n\n\nJul 17, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/disimpact-ggplot2/index.html",
    "href": "posts/disimpact-ggplot2/index.html",
    "title": "Intro to ggplot2",
    "section": "",
    "text": "Note\n\n\n\nThis post was originally created for the CCC IR R Work Group - an informal gathering of IR professionals interested in learning more about R."
  },
  {
    "objectID": "posts/disimpact-ggplot2/index.html#our-goal",
    "href": "posts/disimpact-ggplot2/index.html#our-goal",
    "title": "Intro to ggplot2",
    "section": "Our Goal",
    "text": "Our Goal\nThis is what we are working towards:\n\n\n\n\n\nThis is the code to generate that graph:\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Clean our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference), color = clr_green, size = 2) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), color = clr_purple, nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), color = clr_green, nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    ) +\n    scale_fill_manual(values = c(\"DI\" = clr_orange, \"No DI\" = clr_dark)) +\n    scale_y_continuous(labels = scales::percent,\n                       expand = expansion(mult = c(0, .02))) +\n    theme_bw() +\n    theme(\n        plot.title = element_text(face = \"bold\", color = clr_red),\n        legend.position = c(.5, .9),\n        panel.grid.major.x = element_blank()\n    )\nThroughout this tutorial, I’ll do my best to explain each line of the above code and how you might change it to fit your needs."
  },
  {
    "objectID": "posts/disimpact-ggplot2/index.html#how-well-get-there",
    "href": "posts/disimpact-ggplot2/index.html#how-well-get-there",
    "title": "Intro to ggplot2",
    "section": "How we’ll get there",
    "text": "How we’ll get there\n\nSet Up - Install the necessary packages.\nQuick Disproportionate Impact Analysis - Getting data to visualize\nggplot2 theory?\nPart 1: Bare Minimum - Get A Basic Bar Chart\nPart 2: Extra Credit - Make the Bar Chart Fancy"
  },
  {
    "objectID": "posts/disimpact-ggplot2/index.html#building-layers",
    "href": "posts/disimpact-ggplot2/index.html#building-layers",
    "title": "Intro to ggplot2",
    "section": "Building layers",
    "text": "Building layers\nPlots created by ggplot2 are composed of “layers”. We start with a blank canvas, then use the data to create an x and y axis layer. Then we add a layer of rectangles for our bar chart, then we add a layer of text to label our bars. ggplot2 handles a lot of the positioning work for us, but provides tools to let us customize where/how each element of each layer appears."
  },
  {
    "objectID": "posts/disimpact-ggplot2/index.html#geoms-and-aesthetics",
    "href": "posts/disimpact-ggplot2/index.html#geoms-and-aesthetics",
    "title": "Intro to ggplot2",
    "section": "Geoms and Aesthetics",
    "text": "Geoms and Aesthetics\nTwo fundamental ggplot2 ideas are “geoms” and “aesthetics”. geoms (geometry objects) are shapes on the graph, like squares, circles, lines, and (less intuitively) text. Aesthetics are attributes of those shapes: fill, linetype, size, opacity, color, etc…\nWe can have multiple geoms in a single graph - think of a line graph with a point at each connection and text displaying each value. We can map our data to various aesthetics (abbreviated aes in ggplot2) of the shapes - think changing the color of a bar in a bar graph depending on whether our data shows DI or not.\nWith data, geoms, and aesthetics, we can create a basic graph."
  },
  {
    "objectID": "posts/disimpact-ggplot2/index.html#add-text",
    "href": "posts/disimpact-ggplot2/index.html#add-text",
    "title": "Intro to ggplot2",
    "section": "Add Text",
    "text": "Add Text\nWe want to label each bar with the y-axis value using text. To do that, we can add a geom_text and specify that we want to use the outcome variable as our label:\n\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity') +\n    geom_text(aes(label = pct))"
  },
  {
    "objectID": "posts/disimpact-ggplot2/index.html#clean-up-text",
    "href": "posts/disimpact-ggplot2/index.html#clean-up-text",
    "title": "Intro to ggplot2",
    "section": "Clean Up Text",
    "text": "Clean Up Text\nThat many decimal places looks ugly, so let’s clean up that data on the fly. We can do this by rounding the percentage to two places, mutliply it by 100, and paste a percentage sign on the end:\n\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity') +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")))\n\n\n\n\nI want the text to be slightly above the bar, instead of overlapping. Currently, ggplot2 is using the y-axis value to position our text. We want to nudge it slightly above. There is an argument specifically for this purpose:\n\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity') +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), nudge_y = .02)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you look at the help documentation for geom_bar and geom_text, you’ll see that they require a mapping and a data argument. We don’t specifically provide those arguments, so how does ggplot2 know that we want to use our di_data and that the x-axis should be Ethnicity and the y-axis should be outcome (in our case Transfer rate). Well, subsequent layers will inherit those arguments from our original call to ggplot. This is useful because it prevents us from having to specify the same data and mappings for each layer. However, if needed, we can still override those defaults by specifying new data or mapping arguments. In our case, though, using the defaults is what we want."
  },
  {
    "objectID": "posts/disimpact-ggplot2/index.html#highlighting-di",
    "href": "posts/disimpact-ggplot2/index.html#highlighting-di",
    "title": "Intro to ggplot2",
    "section": "Highlighting DI",
    "text": "Highlighting DI\nNext we want to call attention to those populations who have experienced Disproportionate Impact. In our di_data data.frame, there is a column called “di_indicator”, that shows a “DI” for those with DI and a “No DI” for those without.\nWe want the aesthetic of our geom_bars to change, based on “di_indicator”. So within our geom_bar call, lets add a call to aes(). We use the fill aesthetic, to fill the shape up with color. The color aesthetic only deals with the color of the lines.\n\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), nudge_y = .02)\n\n\n\n\nA legend appeared helps us distinguish what each color means. Cool!"
  },
  {
    "objectID": "posts/disimpact-ggplot2/index.html#adding-labels",
    "href": "posts/disimpact-ggplot2/index.html#adding-labels",
    "title": "Intro to ggplot2",
    "section": "Adding Labels",
    "text": "Adding Labels\nWe want to add/modify the graphs labels, so that our audience knows that they’re looking at. There are many ways to do this, but I’ve only ever used the labs (short for “labels”) function in ggplot2. I’m not sure if these elements are considered geoms, aesthetics, or something else, but they’re easy to use. You’re just gonna have to memorize the arguments or use ?labs to learn more:\n\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), nudge_y = .02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    )"
  },
  {
    "objectID": "posts/disimpact-ggplot2/index.html#reference-line",
    "href": "posts/disimpact-ggplot2/index.html#reference-line",
    "title": "Intro to ggplot2",
    "section": "Reference Line",
    "text": "Reference Line\nWe want to create a horizontal line (geom) that shows us where the Overall Transfer Rate is. We also want to label this line with text to let our audience know what it meant.\nKnowing where the “Overall Tranfer Rate” lives in our data is half of the battle. It’s located in our di_data data.frame in a variable called reference. In the R console we can see it with the following line of code:\n\ndi_data$reference\n\n[1] 0.5264 0.5264 0.5264 0.5264 0.5264 0.5264\n\n\nNotice how it shows up multiple times? That’s because it’s included in each row of the data.frame. If we only want one to show up, we can make a call to the unique function:\n\nunique(di_data$reference)\n\n[1] 0.5264\n\n\nWe can combine this with a geom_hline to our chart like so:\n\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference)) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), nudge_y = .02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    )\n\n\n\n\nAwesome! Let’s label that line now, so people know what it means. We want to add text (geom) to the line. And it looks like there is space to position the text above the bar for the “Black” category. I’m also creating a more appropriately formatted label at the same time and nudging it a little below the actual reference line:\n\nlibrary(ggplot2)\nlibrary(DisImpact)\n\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\n\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\n\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference)) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    )"
  },
  {
    "objectID": "posts/disimpact-ggplot2/index.html#end-part-1",
    "href": "posts/disimpact-ggplot2/index.html#end-part-1",
    "title": "Intro to ggplot2",
    "section": "End Part 1",
    "text": "End Part 1\nVOILA!! we have a graph that can stand on it’s own. However, we’ll learn how to make it spookier in the second part."
  },
  {
    "objectID": "posts/disimpact-ggplot2/index.html#custom-colors",
    "href": "posts/disimpact-ggplot2/index.html#custom-colors",
    "title": "Intro to ggplot2",
    "section": "Custom Colors",
    "text": "Custom Colors\nThe default colors are pretty ugly and don’t really help us “highlight” the in-need populations. To do that, we want a more muted color for the “No DI” students and a louder color for the “DI” students.\nAfter googling “Halloween Color Hex Codes”, I found the following “hex codes” (google it) and am going to add them to our script above our graph code.\n\n\n\n\n\n\nNote\n\n\n\nI’m also going to add comments that break our code up into sections, so things are more visually organized.\n\n\n\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Clean our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference)) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    )\n\n\n\n\nWe’ve just declared our colors. We haven’t used them anywhere, so our graph looks unchanged.\nIn order to specify that “DI” students should have the color clr_orange and that “No DI” students should have the color clr_dark, we need to use scale_fill_manual.\nHonestly, I don’t know how/why we use a function that starts with scale_, but the fill makes sense, because we’re changing the fill and the manual makes sense cause we’re doing it manually, as opposed to letting gglpot2 handle the color choices.\n\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Clean our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference)) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    ) +\n    scale_fill_manual(values = c(\"DI\" = clr_orange, \"No DI\" = clr_dark))\n\n\n\n\nNow let’s change the color of our reference line, reference line text, and bar labels. We’re also going to switch the order of our code to have our geom_hline be “behind” the bar labels:\n\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Prepare our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference), color = clr_green, size = 2) + # CHANGED HERE\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), color = clr_purple, nudge_y = .02) + # CHANGED HERE\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), color = clr_green, nudge_y = -.02) + # CHANGED HERE\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    ) +\n    scale_fill_manual(values = c(\"DI\" = clr_orange, \"No DI\" = clr_dark))"
  },
  {
    "objectID": "posts/disimpact-ggplot2/index.html#changing-the-y-axis-percentages",
    "href": "posts/disimpact-ggplot2/index.html#changing-the-y-axis-percentages",
    "title": "Intro to ggplot2",
    "section": "Changing the Y-Axis Percentages",
    "text": "Changing the Y-Axis Percentages\nNow we want to change the Y-Axis labels from decimals (default) to formatted percentages. This will make it a little easier on the eyes.\nWe’re adding the scale_y_continuous function here:\n\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Clean our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference), color = clr_green, size = 2) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), color = clr_purple, nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), color = clr_green, nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    ) +\n    scale_fill_manual(values = c(\"DI\" = clr_orange, \"No DI\" = clr_dark)) +\n    scale_y_continuous(labels = scales::percent)"
  },
  {
    "objectID": "posts/disimpact-ggplot2/index.html#add-theme",
    "href": "posts/disimpact-ggplot2/index.html#add-theme",
    "title": "Intro to ggplot2",
    "section": "Add Theme",
    "text": "Add Theme\nggplot2 comes with many themes that can be applied to give the visual a different look. All of these functions start with theme_. Below we add a call to theme_bw (short for “theme black/white”). Try out some other themes, like theme_minimal or theme_classic.\n\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Clean our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference), color = clr_green, size = 2) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), color = clr_purple, nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), color = clr_green, nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    ) +\n    scale_fill_manual(values = c(\"DI\" = clr_orange, \"No DI\" = clr_dark)) +\n    scale_y_continuous(labels = scales::percent) +\n    theme_bw()\n\n\n\n\nThemes focus on aspect of the visual that are not really concerned with data. We can add our own theme elements with a call to the general theme() function.\nUse ?theme to see the never ending list of elements you can manually control. It’s overwhelming, but useful when you have a very specific look you’re going for. Let’s change the way the Title Text looks:\n\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Clean our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference), color = clr_green, size = 2) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), color = clr_purple, nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), color = clr_green, nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    ) +\n    scale_fill_manual(values = c(\"DI\" = clr_orange, \"No DI\" = clr_dark)) +\n    scale_y_continuous(labels = scales::percent) +\n    theme_bw() +\n    theme(\n        plot.title = element_text(face = \"bold\", color = clr_red)\n    )\n\n\n\n\nNow lets change the position of the legend and remove the vertical background lines:\n\n# Load our Libraries ####\nlibrary(ggplot2)\nlibrary(DisImpact)\n\n# Clean our data ####\ndi_data <- di_ppg(success = student_equity$Transfer, group = student_equity$Ethnicity)\ndi_data <- di_data[c(\"group\", \"pct\", \"di_indicator\", \"reference\", \"n\")]\ndi_data$di_indicator <- ifelse(di_data$di_indicator == 1, \"DI\", \"No DI\")\n\n# Declare some constants ####\n# Halloween Colors: Google \"Halloween Colors Hex Codes\"\nclr_purple <- \"#902EBB\"\nclr_orange <- \"#F4831B\"\nclr_green  <- \"#63C328\"\nclr_red    <- \"#D02823\"\nclr_dark   <- \"#250d03\"\n\n# Create Graph ####\nggplot(data = di_data, mapping = aes(x = group, y = pct)) +\n    geom_bar(stat = 'identity', aes(fill = di_indicator)) +\n    geom_hline(yintercept = unique(di_data$reference), color = clr_green, size = 2) +\n    geom_text(aes(label = paste0(100 * round(pct, 2), \"%\")), color = clr_purple, nudge_y = .02) +\n    geom_text(aes(y = unique(reference), x = \"Black\", label = paste0(\"Overall: \", round(unique(reference), 2)*100, \"%\")), color = clr_green, nudge_y = -.02) +\n    labs(\n        title = \"Inequities are scary...\", # Add title\n        subtitle = \"Visualizing Disproportionate Impact with ggplot2\", # Add subtitle\n        x = NULL, # This removes the x-axis label\n        y = \"Transfer Rate\", # This modifies the y-axis label,\n        caption = \"Data Source: DisImpact R Package\",\n        fill = NULL # This removes the legend title, but we could easily rename it.\n    ) +\n    scale_fill_manual(values = c(\"DI\" = clr_orange, \"No DI\" = clr_dark)) +\n    scale_y_continuous(labels = scales::percent) +\n    theme_bw() +\n    theme(\n        plot.title = element_text(face = \"bold\", color = clr_red),\n        legend.position = c(.5, .9),\n        panel.grid.major.x = element_blank()\n    )\n\n\n\n\nMost arguments within the theme() function, will take calls from the element_* family of functions, like element_text, element_rect, or element_line depending on what kind of element you want to change. Use ggplot2::element_text to read the docs."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "Intro to ggplot2\n\n\n\nR\n\n\nggplot2\n\n\nIR\n\n\n\n\n\n\n\n\n\n\nOct 28, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/proj1.html",
    "href": "projects/proj1.html",
    "title": "Project 1",
    "section": "",
    "text": "This is a placeholder for details about a future project"
  },
  {
    "objectID": "projects/proj2.html",
    "href": "projects/proj2.html",
    "title": "Project 2",
    "section": "",
    "text": "This is a placeholder for details about a future project"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Resume",
    "section": "",
    "text": "Checkout my LinkedIn Profile for my education and experience."
  }
]